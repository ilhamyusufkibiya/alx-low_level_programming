!<arch>
0-isupper.c/    0           0     0     644     228       `
#include "main.h"

/**
 * _isupper - checks for uppercase character.
 * @C: function parameter
 * Return: 1 if sucess and 0 on failure
 */

int _isupper(int C)
{
	if (C >= 'A' && C <= 'Z')
		return (1);
	else
		return (0);
}



0-memset.c/     0           0     0     644     371       `
#include "main.h"
/**
 * _memset - fills a block of memory with a specific value.
 * @s: starting address of a memory to be filled
 * @b: the desired value
 * @n:number of bytes to be changed
 * Return: changed array with new value for n bytes
 */

char *_memset(char *s, char b, unsigned int n)
{
	int i = 0;

	for (; n > 0; i++)
	{
		s[i] = b;
		n--;
	}
	return (s);
}

0-putchar.c/    0           0     0     644     268       `
#include "main.h"

/**
 * main - function that prints _putchar
 * Return: returns 0;
 */

int main(void)
{
	_putchar('_');
	_putchar('p');
	_putchar('u');
	_putchar('t');
	_putchar('c');
	_putchar('h');
	_putchar('a');
	_putchar('r');
	_putchar('\n');

	return (0);
}
0-strcat.c/     0           0     0     644     397       `
#include "main.h"
/**
 * _strcat - concatenates two strings.
 * @dest: destination string
 * @src: source string
 * Return: dest;
 */

char *_strcat(char *dest, char *src)
{
	int destlen = 0;
	int srclen = 0;
	int i;

	for (i = 0 ; dest[i] != '\0' ; i++)
		destlen++;
	for (i = 0 ; src[i] != '\0' ; i++)
		srclen++;
	for (i = 0 ; i <= srclen ; i++)
		dest[destlen + i] = src[i];
	return (dest);
}

100-atoi.c/     0           0     0     644     414       `
#include "main.h"

/**
 * _atoi - Convert a string to an integer.
 * @s: The pointer to convert
 * Return: A integer
 */

int _atoi(char *s)

{

	int c = 0;
	unsigned int ni = 0;
	int min = 1;
	int isi = 0;

	while (s[c])
	{
	if (s[c] == 45)
	{
	min *= -1;
	}
	while (s[c] >= 48 && s[c] <= 57)
	{
	isi = 1;
	ni = (ni * 10) + (s[c] - '0');
	c++;
	}
	if (isi == 1)
	{
	break;
	}
	c++;
	}
	ni *= min;
	return (ni);
}
1-isdigit.c/    0           0     0     644     231       `
#include "main.h"

/**
 * _isdigit - checks for a digit (0 through 9).
 * @c: parameter to be checkes
 * Return: 1 on success and 0 on failure
 */

int _isdigit(int c)
{
	if (c >= 48 && c <= 57)
		return (1);
	else
		return (0);
}

1-memcpy.c/     0           0     0     644     358       `
#include "main.h"
/**
 * _memcpy - function that copies memory area.
 * @dest: memory where is stored
 * @src: memory where is copied
 * @n: number of bytes
 * Return: copied memory with n byted changed
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
	int r = 0;
	int i = n;

	for (;r < i; r++)
	{
		dest[r] = src[r];
		n--;
	}
	return (dest);
}
1-strncat.c/    0           0     0     644     398       `
#include "main.h"
#include <string.h>

/**
 * _strncat - conctenate two strings.
 * @dest: destination strings.
 * @src: source string
 * Return: dest
 * @n: number of bytes to conctenate
 */

char *_strncat(char *dest, char *src, int n)
{
	int len = strlen(dest);
	int i;

	for (i = 0 ; i < n && *src != '\0' ; i++)
	{
		dest[len + i] = *src;
		src++;
	}
	dest[len + i] = '\0';
	return (dest);
}

2-strchr.c/     0           0     0     644     235       `
#include "main.h"
/**
 * _strchr - entry point
 * @s: input
 * @c: input
 * Return: always 0 success
 */
char *_strchr(char *s, char c)
{
	int i = 0;

	for (; s[i] >= '\0'; i++)
	{
		if (s[i] == c)
			return (&s[i]);
	}
	return (0);
}

2-strlen.c/     0           0     0     644     241       `
#include "main.h"

/**
 * _strlen - find the length of a string
 * @s: string to be counted
 * Return: length of the string
 */

int _strlen(char *s)
{
	int z;
	int count = 0;

	for (z = 0 ; s[z] != '\0' ; z++)
		count++;
	return (count);
}

2-strncpy.c/    0           0     0     644     330       `
#include "main.h"

/**
 * _strncpy - copy strings
 * @dest: destination string
 * @src: source string
 * @n: number of bytes
 * Return: dest
 */
char *_strncpy(char *dest, char *src, int n)
{
	int i;

	for (i = 0 ; i < n && src[i] != '\0' ; i++)
		dest[i] = src[i];
	while (i < n)
	{
		dest[i] = '\0';
		i++;
	}
	return (dest);
}
3-islower.c/    0           0     0     644     202       `
#include "main.h"

/**
 * _islower - checks for lower character
 * @c: parameter to be checked
 * Return: 1 or 0
 */
int _islower(int c)
{
	if (c >= 'a' && c <= 'z')
		return (1);
	else
		return (0);
}
3-puts.c/       0           0     0     644     222       `
#include "main.h"
/**
 * _puts - function that prints a string
 * @str: string to be printed
 * Return: void
 */

void _puts(char *str)
{
	int i;

	for (i = 0 ; str[i] != '\0' ; i++)
		_putchar(str[i]);
	_putchar('\n');
}
3-strcmp.c/     0           0     0     644     363       `
#include "main.h"

/**
 * _strcmp - string compare
 * @s1: parameter 1
 * @s2: parameter 2
 * Return: int
 */

int _strcmp(char *s1, char *s2)
{
	int i;

	for (i = 0 ; s1[i] != '\0' || s2[i] != '\0' ; i++)
	{
		if (s1[i] != s2[i])
		{
			if (s1[i] < s2[i])
				return (s1[i] - s2[i]);
			else if (s2[i] < s1[i])
				return (s1[i] - s2[i]);
		}
	}
	return (0);
}


3-strspn.c/     0           0     0     644     374       `
#include "main.h"
/**
 *  _strspn - entry point
 *  @s: input
 *  @accept: input
 *  Return: always 0 success
 */

unsigned int _strspn(char *s, char *accept)
{
	unsigned int n = 0;
	int r;

	while (*s)
	{
		for (r = 0; accept[r]; r++)
		{
			if (*s == accept[r])
			{
				n++;
				break;
			}
			else if (accept[r + 1] == '\0')
				return (n);
		}
		s++;
	}
	return (n);
}
4-isalpha.c/    0           0     0     644     220       `
#include "main.h"

/**
 * _isalpha - checks for alphabets
 *@c: function parameter
 *Return: 1 and 0
 */

int _isalpha(int c)

{
	if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))
		return (1);
	else
		return (0);
}
4-strpbrk.c/    0           0     0     644     282       `
#include "main.h"
/**
 * _strpbrk - entry point.
 * @s: input
 * @accept: input
 * Return: always 0 success
 */

char *_strpbrk(char *s, char *accept)
{
	int k;

	while (*s)
	{
		for (k = 0; accept[k]; k++)
		{
			if (*s == accept[k])
			return (s);
		}
	s++;
	}
	return ('\0');
}

5-strstr.c/     0           0     0     644     530       `
#include "main.h"
/**
 * _strstr - function that locates a substring.
 * @haystack: The string to be searched
 * @needle: The substring to be located
 * Return: A pointer or null
 */
char *_strstr(char *haystack, char *needle)
{
	int index;

	if (needle == 0)

		return (haystack);

	while (*haystack)
	{
		index = 0;

		if (haystack[index] == needle[index])
		{
			do {
				if (needle[index + 1] == '\0')
					return (haystack);

				index++;
			} while (haystack[index] == needle[index]);
		}
		haystack++;
	}
	return ('\0');
}
6-abs.c/        0           0     0     644     232       `
#include "main.h"

/**
 * _abs - function to find the absolute value of a number.
 * @a: function parameter
 * Return: -a or a;
 */

int _abs(int a)
{

	if (a < 0)
		return (-a);
	else if (a >= 0)
	{
		return (a);
	}
	return (0);
}
9-strcpy.c/     0           0     0     644     249       `
#include "main.h"

/**
 * _strcpy - copies string
 * @dest: destination
 * @src: source
 * Return: dest
 */
char *_strcpy(char *dest, char *src)
{
	int i;

	for (i = 0 ; src[i] != '\0' ; i++)
		dest[i] = src[i];
	 dest[i] = '\0';
		return (dest);
}

main.c/         0           0     0     644     148       `
#include "main.h"

int main(void)
{
    _puts("\"At the end of the day, my goal was to be the best hacker\"\n\t- Kevin Mitnick");
    return (0);
}
_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

